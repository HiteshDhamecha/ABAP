-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstracts
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------



-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Logs
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key AbstractResultId in table AbstractLogs
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AbstractLogs_AbstractResultId' 
    AND object_id = OBJECT_ID('[dbo].[AbstractLogs]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AbstractLogs_AbstractResultId ON [dbo].[AbstractLogs] ([AbstractResultId]);

-- Index for foreign key AIAgentId in table AbstractLogs
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AbstractLogs_AIAgentId' 
    AND object_id = OBJECT_ID('[dbo].[AbstractLogs]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AbstractLogs_AIAgentId ON [dbo].[AbstractLogs] ([AIAgentId]);


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Results
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key AbstractStatusId in table AbstractResult
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AbstractResult_AbstractStatusId' 
    AND object_id = OBJECT_ID('[dbo].[AbstractResult]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AbstractResult_AbstractStatusId ON [dbo].[AbstractResult] ([AbstractStatusId]);


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Status
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------



-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Email Templates
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------



-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Events
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------



-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Review Criterias
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ScoreBoardID in table ReviewCriteria
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ReviewCriteria_ScoreBoardID' 
    AND object_id = OBJECT_ID('[dbo].[ReviewCriteria]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ReviewCriteria_ScoreBoardID ON [dbo].[ReviewCriteria] ([ScoreBoardID]);


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Score Boards
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------



-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Sessions
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key EventID in table Session
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_Session_EventID' 
    AND object_id = OBJECT_ID('[dbo].[Session]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_Session_EventID ON [dbo].[Session] ([EventID]);


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Session Score Boards
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key SessionId in table SessionScoreBoard
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_SessionScoreBoard_SessionId' 
    AND object_id = OBJECT_ID('[dbo].[SessionScoreBoard]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_SessionScoreBoard_SessionId ON [dbo].[SessionScoreBoard] ([SessionId]);

-- Index for foreign key ScoreBoardId in table SessionScoreBoard
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_SessionScoreBoard_ScoreBoardId' 
    AND object_id = OBJECT_ID('[dbo].[SessionScoreBoard]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_SessionScoreBoard_ScoreBoardId ON [dbo].[SessionScoreBoard] ([ScoreBoardId]);


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstracts
-- Item: spCreateAbstract
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Abstract
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateAbstract]
GO

CREATE PROCEDURE [dbo].[spCreateAbstract]
    @SessionID uniqueidentifier,
    @UserID uniqueidentifier,
    @YearOfExp int,
    @AbstractText nvarchar(MAX),
    @UploadUrl nvarchar(500)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[Abstract]
        (
            [SessionID],
            [UserID],
            [YearOfExp],
            [AbstractText],
            [UploadUrl]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @SessionID,
            @UserID,
            @YearOfExp,
            @AbstractText,
            @UploadUrl
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwAbstracts] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateAbstract] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Logs
-- Item: spCreateAbstractLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AbstractLogs
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateAbstractLogs]
GO

CREATE PROCEDURE [dbo].[spCreateAbstractLogs]
    @AbstractResultId uniqueidentifier,
    @AIAgentId uniqueidentifier,
    @ActionDescription nvarchar(MAX),
    @UpdatedOn datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[AbstractLogs]
        (
            [AbstractResultId],
            [AIAgentId],
            [ActionDescription],
            [UpdatedOn]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @AbstractResultId,
            @AIAgentId,
            @ActionDescription,
            @UpdatedOn
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwAbstractLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateAbstractLogs] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Results
-- Item: spCreateAbstractResult
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AbstractResult
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateAbstractResult]
GO

CREATE PROCEDURE [dbo].[spCreateAbstractResult]
    @AbstractID uniqueidentifier,
    @Score float(53),
    @AbstractStatusId uniqueidentifier,
    @ReviewComments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[AbstractResult]
        (
            [AbstractID],
            [Score],
            [AbstractStatusId],
            [ReviewComments]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @AbstractID,
            @Score,
            @AbstractStatusId,
            @ReviewComments
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwAbstractResults] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateAbstractResult] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Status
-- Item: spCreateAbstractStatus
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AbstractStatus
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateAbstractStatus]
GO

CREATE PROCEDURE [dbo].[spCreateAbstractStatus]
    @Name nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[AbstractStatus]
        (
            [Name]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwAbstractStatus] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateAbstractStatus] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Email Templates
-- Item: spCreateEmailTemplate
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EmailTemplate
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateEmailTemplate]
GO

CREATE PROCEDURE [dbo].[spCreateEmailTemplate]
    @Subject nvarchar(255),
    @Body nvarchar(MAX),
    @CreatedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[EmailTemplate]
        (
            [Subject],
            [Body],
            [CreatedAt]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Subject,
            @Body,
            @CreatedAt
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwEmailTemplates] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateEmailTemplate] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Events
-- Item: spCreateEvent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Event
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateEvent]
GO

CREATE PROCEDURE [dbo].[spCreateEvent]
    @Name nvarchar(255),
    @EventStartDate datetime,
    @EventEndDate datetime,
    @Description nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[Event]
        (
            [Name],
            [EventStartDate],
            [EventEndDate],
            [Description]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @EventStartDate,
            @EventEndDate,
            @Description
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwEvents] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateEvent] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Review Criterias
-- Item: spCreateReviewCriteria
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ReviewCriteria
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateReviewCriteria]
GO

CREATE PROCEDURE [dbo].[spCreateReviewCriteria]
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Weightage int,
    @ScoreBoardID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[ReviewCriteria]
        (
            [Name],
            [Description],
            [Weightage],
            [ScoreBoardID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @Description,
            @Weightage,
            @ScoreBoardID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwReviewCriterias] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateReviewCriteria] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Score Boards
-- Item: spCreateScoreBoard
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ScoreBoard
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateScoreBoard]
GO

CREATE PROCEDURE [dbo].[spCreateScoreBoard]
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @CutOffScore int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[ScoreBoard]
        (
            [Name],
            [Description],
            [CutOffScore]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @Description,
            @CutOffScore
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwScoreBoards] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateScoreBoard] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Sessions
-- Item: spCreateSession
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Session
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateSession]
GO

CREATE PROCEDURE [dbo].[spCreateSession]
    @EventID uniqueidentifier,
    @Name nvarchar(255),
    @SessionStartDate datetime,
    @SessionEndDate datetime,
    @WeightedScore decimal(10, 2),
    @Title nvarchar(200),
    @UserPrompt nvarchar(MAX),
    @AbstractSubmissionStartDate datetime,
    @AbstractSubmissionEndDate datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[Session]
        (
            [EventID],
            [Name],
            [SessionStartDate],
            [SessionEndDate],
            [WeightedScore],
            [Title],
            [UserPrompt],
            [AbstractSubmissionStartDate],
            [AbstractSubmissionEndDate]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @EventID,
            @Name,
            @SessionStartDate,
            @SessionEndDate,
            @WeightedScore,
            @Title,
            @UserPrompt,
            @AbstractSubmissionStartDate,
            @AbstractSubmissionEndDate
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwSessions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateSession] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Session Score Boards
-- Item: spCreateSessionScoreBoard
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR SessionScoreBoard
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateSessionScoreBoard]
GO

CREATE PROCEDURE [dbo].[spCreateSessionScoreBoard]
    @SessionId uniqueidentifier,
    @ScoreBoardId uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[SessionScoreBoard]
        (
            [SessionId],
            [ScoreBoardId]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @SessionId,
            @ScoreBoardId
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwSessionScoreBoards] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateSessionScoreBoard] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Personal Details
-- Item: spCreateUserPersonalDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserPersonalDetails
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spCreateUserPersonalDetails]
GO

CREATE PROCEDURE [dbo].[spCreateUserPersonalDetails]
    @JobTitle nvarchar(50),
    @PhoneNumber nvarchar(20),
    @Affiliation nvarchar(50),
    @SocialMediaLinks nvarchar(MAX),
    @PreviousSpeakingExperiences nvarchar(MAX),
    @UserID uniqueidentifier = '00000000-0000-0000-0000-000000000000'
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [dbo].[UserPersonalDetails]
        (
            [JobTitle],
            [PhoneNumber],
            [Affiliation],
            [SocialMediaLinks],
            [PreviousSpeakingExperiences],
            [UserID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @JobTitle,
            @PhoneNumber,
            @Affiliation,
            @SocialMediaLinks,
            @PreviousSpeakingExperiences,
            CASE @UserID WHEN '00000000-0000-0000-0000-000000000000' THEN null ELSE @UserID END
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [dbo].[vwUserPersonalDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [dbo].[spCreateUserPersonalDetails] TO [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstracts
-- Item: spDeleteAbstract
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Abstract
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteAbstract]
GO

CREATE PROCEDURE [dbo].[spDeleteAbstract]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[Abstract]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteAbstract] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Logs
-- Item: spDeleteAbstractLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AbstractLogs
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteAbstractLogs]
GO

CREATE PROCEDURE [dbo].[spDeleteAbstractLogs]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[AbstractLogs]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteAbstractLogs] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Results
-- Item: spDeleteAbstractResult
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AbstractResult
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteAbstractResult]
GO

CREATE PROCEDURE [dbo].[spDeleteAbstractResult]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[AbstractResult]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteAbstractResult] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Status
-- Item: spDeleteAbstractStatus
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AbstractStatus
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteAbstractStatus]
GO

CREATE PROCEDURE [dbo].[spDeleteAbstractStatus]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[AbstractStatus]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteAbstractStatus] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Email Templates
-- Item: spDeleteEmailTemplate
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EmailTemplate
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteEmailTemplate]
GO

CREATE PROCEDURE [dbo].[spDeleteEmailTemplate]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[EmailTemplate]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteEmailTemplate] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Events
-- Item: spDeleteEvent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Event
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteEvent]
GO

CREATE PROCEDURE [dbo].[spDeleteEvent]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[Event]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteEvent] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Review Criterias
-- Item: spDeleteReviewCriteria
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ReviewCriteria
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteReviewCriteria]
GO

CREATE PROCEDURE [dbo].[spDeleteReviewCriteria]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[ReviewCriteria]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteReviewCriteria] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Score Boards
-- Item: spDeleteScoreBoard
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ScoreBoard
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteScoreBoard]
GO

CREATE PROCEDURE [dbo].[spDeleteScoreBoard]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[ScoreBoard]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteScoreBoard] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Sessions
-- Item: spDeleteSession
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Session
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteSession]
GO

CREATE PROCEDURE [dbo].[spDeleteSession]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[Session]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteSession] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Session Score Boards
-- Item: spDeleteSessionScoreBoard
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR SessionScoreBoard
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteSessionScoreBoard]
GO

CREATE PROCEDURE [dbo].[spDeleteSessionScoreBoard]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[SessionScoreBoard]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteSessionScoreBoard] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Personal Details
-- Item: spDeleteUserPersonalDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR UserPersonalDetails
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spDeleteUserPersonalDetails]
GO

CREATE PROCEDURE [dbo].[spDeleteUserPersonalDetails]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [dbo].[UserPersonalDetails]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [dbo].[spDeleteUserPersonalDetails] TO [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstracts
-- Item: spUpdateAbstract
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Abstract
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateAbstract]
GO

CREATE PROCEDURE [dbo].[spUpdateAbstract]
    @ID uniqueidentifier,
    @SessionID uniqueidentifier,
    @UserID uniqueidentifier,
    @YearOfExp int,
    @AbstractText nvarchar(MAX),
    @UploadUrl nvarchar(500)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[Abstract]
    SET
        [SessionID] = @SessionID,
        [UserID] = @UserID,
        [YearOfExp] = @YearOfExp,
        [AbstractText] = @AbstractText,
        [UploadUrl] = @UploadUrl
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwAbstracts]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateAbstract] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Abstract table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateAbstract
GO
CREATE TRIGGER [dbo].trgUpdateAbstract
ON [dbo].[Abstract]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[Abstract]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[Abstract] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Logs
-- Item: spUpdateAbstractLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AbstractLogs
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateAbstractLogs]
GO

CREATE PROCEDURE [dbo].[spUpdateAbstractLogs]
    @ID uniqueidentifier,
    @AbstractResultId uniqueidentifier,
    @AIAgentId uniqueidentifier,
    @ActionDescription nvarchar(MAX),
    @UpdatedOn datetime
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[AbstractLogs]
    SET
        [AbstractResultId] = @AbstractResultId,
        [AIAgentId] = @AIAgentId,
        [ActionDescription] = @ActionDescription,
        [UpdatedOn] = @UpdatedOn
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwAbstractLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateAbstractLogs] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the AbstractLogs table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateAbstractLogs
GO
CREATE TRIGGER [dbo].trgUpdateAbstractLogs
ON [dbo].[AbstractLogs]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[AbstractLogs]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[AbstractLogs] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Results
-- Item: spUpdateAbstractResult
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AbstractResult
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateAbstractResult]
GO

CREATE PROCEDURE [dbo].[spUpdateAbstractResult]
    @ID uniqueidentifier,
    @AbstractID uniqueidentifier,
    @Score float(53),
    @AbstractStatusId uniqueidentifier,
    @ReviewComments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[AbstractResult]
    SET
        [AbstractID] = @AbstractID,
        [Score] = @Score,
        [AbstractStatusId] = @AbstractStatusId,
        [ReviewComments] = @ReviewComments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwAbstractResults]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateAbstractResult] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the AbstractResult table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateAbstractResult
GO
CREATE TRIGGER [dbo].trgUpdateAbstractResult
ON [dbo].[AbstractResult]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[AbstractResult]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[AbstractResult] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Status
-- Item: spUpdateAbstractStatus
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AbstractStatus
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateAbstractStatus]
GO

CREATE PROCEDURE [dbo].[spUpdateAbstractStatus]
    @ID uniqueidentifier,
    @Name nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[AbstractStatus]
    SET
        [Name] = @Name
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwAbstractStatus]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateAbstractStatus] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the AbstractStatus table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateAbstractStatus
GO
CREATE TRIGGER [dbo].trgUpdateAbstractStatus
ON [dbo].[AbstractStatus]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[AbstractStatus]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[AbstractStatus] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Email Templates
-- Item: spUpdateEmailTemplate
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EmailTemplate
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateEmailTemplate]
GO

CREATE PROCEDURE [dbo].[spUpdateEmailTemplate]
    @ID uniqueidentifier,
    @Subject nvarchar(255),
    @Body nvarchar(MAX),
    @CreatedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[EmailTemplate]
    SET
        [Subject] = @Subject,
        [Body] = @Body,
        [CreatedAt] = @CreatedAt
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwEmailTemplates]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateEmailTemplate] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EmailTemplate table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateEmailTemplate
GO
CREATE TRIGGER [dbo].trgUpdateEmailTemplate
ON [dbo].[EmailTemplate]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[EmailTemplate]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[EmailTemplate] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Events
-- Item: spUpdateEvent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Event
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateEvent]
GO

CREATE PROCEDURE [dbo].[spUpdateEvent]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @EventStartDate datetime,
    @EventEndDate datetime,
    @Description nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[Event]
    SET
        [Name] = @Name,
        [EventStartDate] = @EventStartDate,
        [EventEndDate] = @EventEndDate,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwEvents]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateEvent] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Event table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateEvent
GO
CREATE TRIGGER [dbo].trgUpdateEvent
ON [dbo].[Event]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[Event]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[Event] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Review Criterias
-- Item: spUpdateReviewCriteria
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ReviewCriteria
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateReviewCriteria]
GO

CREATE PROCEDURE [dbo].[spUpdateReviewCriteria]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Weightage int,
    @ScoreBoardID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[ReviewCriteria]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [Weightage] = @Weightage,
        [ScoreBoardID] = @ScoreBoardID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwReviewCriterias]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateReviewCriteria] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the ReviewCriteria table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateReviewCriteria
GO
CREATE TRIGGER [dbo].trgUpdateReviewCriteria
ON [dbo].[ReviewCriteria]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[ReviewCriteria]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[ReviewCriteria] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Score Boards
-- Item: spUpdateScoreBoard
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ScoreBoard
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateScoreBoard]
GO

CREATE PROCEDURE [dbo].[spUpdateScoreBoard]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @CutOffScore int
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[ScoreBoard]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [CutOffScore] = @CutOffScore
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwScoreBoards]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateScoreBoard] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the ScoreBoard table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateScoreBoard
GO
CREATE TRIGGER [dbo].trgUpdateScoreBoard
ON [dbo].[ScoreBoard]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[ScoreBoard]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[ScoreBoard] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Sessions
-- Item: spUpdateSession
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Session
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateSession]
GO

CREATE PROCEDURE [dbo].[spUpdateSession]
    @ID uniqueidentifier,
    @EventID uniqueidentifier,
    @Name nvarchar(255),
    @SessionStartDate datetime,
    @SessionEndDate datetime,
    @WeightedScore decimal(10, 2),
    @Title nvarchar(200),
    @UserPrompt nvarchar(MAX),
    @AbstractSubmissionStartDate datetime,
    @AbstractSubmissionEndDate datetime
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[Session]
    SET
        [EventID] = @EventID,
        [Name] = @Name,
        [SessionStartDate] = @SessionStartDate,
        [SessionEndDate] = @SessionEndDate,
        [WeightedScore] = @WeightedScore,
        [Title] = @Title,
        [UserPrompt] = @UserPrompt,
        [AbstractSubmissionStartDate] = @AbstractSubmissionStartDate,
        [AbstractSubmissionEndDate] = @AbstractSubmissionEndDate
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwSessions]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateSession] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Session table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateSession
GO
CREATE TRIGGER [dbo].trgUpdateSession
ON [dbo].[Session]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[Session]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[Session] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Session Score Boards
-- Item: spUpdateSessionScoreBoard
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR SessionScoreBoard
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateSessionScoreBoard]
GO

CREATE PROCEDURE [dbo].[spUpdateSessionScoreBoard]
    @ID uniqueidentifier,
    @SessionId uniqueidentifier,
    @ScoreBoardId uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[SessionScoreBoard]
    SET
        [SessionId] = @SessionId,
        [ScoreBoardId] = @ScoreBoardId
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwSessionScoreBoards]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateSessionScoreBoard] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the SessionScoreBoard table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateSessionScoreBoard
GO
CREATE TRIGGER [dbo].trgUpdateSessionScoreBoard
ON [dbo].[SessionScoreBoard]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[SessionScoreBoard]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[SessionScoreBoard] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Personal Details
-- Item: spUpdateUserPersonalDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR UserPersonalDetails
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [dbo].[spUpdateUserPersonalDetails]
GO

CREATE PROCEDURE [dbo].[spUpdateUserPersonalDetails]
    @ID uniqueidentifier,
    @JobTitle nvarchar(50),
    @PhoneNumber nvarchar(20),
    @Affiliation nvarchar(50),
    @SocialMediaLinks nvarchar(MAX),
    @PreviousSpeakingExperiences nvarchar(MAX),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[UserPersonalDetails]
    SET
        [JobTitle] = @JobTitle,
        [PhoneNumber] = @PhoneNumber,
        [Affiliation] = @Affiliation,
        [SocialMediaLinks] = @SocialMediaLinks,
        [PreviousSpeakingExperiences] = @PreviousSpeakingExperiences,
        [UserID] = @UserID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [dbo].[vwUserPersonalDetails]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [dbo].[spUpdateUserPersonalDetails] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the UserPersonalDetails table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [dbo].trgUpdateUserPersonalDetails
GO
CREATE TRIGGER [dbo].trgUpdateUserPersonalDetails
ON [dbo].[UserPersonalDetails]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [dbo].[UserPersonalDetails]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [dbo].[UserPersonalDetails] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Personal Details
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key UserID in table UserPersonalDetails
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_UserPersonalDetails_UserID' 
    AND object_id = OBJECT_ID('[dbo].[UserPersonalDetails]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_UserPersonalDetails_UserID ON [dbo].[UserPersonalDetails] ([UserID]);


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Logs
-- Item: vwAbstractLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Abstract Logs
-----               SCHEMA:      dbo
-----               BASE TABLE:  AbstractLogs
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwAbstractLogs]
GO

CREATE VIEW [dbo].[vwAbstractLogs]
AS
SELECT
    a.*,
    AIAgent_AIAgentId.[Name] AS [AIAgentId_Virtual]
FROM
    [dbo].[AbstractLogs] AS a
INNER JOIN
    [__mj].[AIAgent] AS AIAgent_AIAgentId
  ON
    [a].[AIAgentId] = AIAgent_AIAgentId.[ID]
GO
GRANT SELECT ON [dbo].[vwAbstractLogs] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Results
-- Item: vwAbstractResults
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Abstract Results
-----               SCHEMA:      dbo
-----               BASE TABLE:  AbstractResult
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwAbstractResults]
GO

CREATE VIEW [dbo].[vwAbstractResults]
AS
SELECT
    a.*,
    AbstractStatus_AbstractStatusId.[Name] AS [AbstractStatusId_Virtual]
FROM
    [dbo].[AbstractResult] AS a
INNER JOIN
    [dbo].[AbstractStatus] AS AbstractStatus_AbstractStatusId
  ON
    [a].[AbstractStatusId] = AbstractStatus_AbstractStatusId.[ID]
GO
GRANT SELECT ON [dbo].[vwAbstractResults] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstracts
-- Item: vwAbstracts
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Abstracts
-----               SCHEMA:      dbo
-----               BASE TABLE:  Abstract
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwAbstracts]
GO

CREATE VIEW [dbo].[vwAbstracts]
AS
SELECT
    a.*
FROM
    [dbo].[Abstract] AS a
GO
GRANT SELECT ON [dbo].[vwAbstracts] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Status
-- Item: vwAbstractStatus
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Abstract Status
-----               SCHEMA:      dbo
-----               BASE TABLE:  AbstractStatus
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwAbstractStatus]
GO

CREATE VIEW [dbo].[vwAbstractStatus]
AS
SELECT
    a.*
FROM
    [dbo].[AbstractStatus] AS a
GO
GRANT SELECT ON [dbo].[vwAbstractStatus] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Email Templates
-- Item: vwEmailTemplates
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Email Templates
-----               SCHEMA:      dbo
-----               BASE TABLE:  EmailTemplate
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwEmailTemplates]
GO

CREATE VIEW [dbo].[vwEmailTemplates]
AS
SELECT
    e.*
FROM
    [dbo].[EmailTemplate] AS e
GO
GRANT SELECT ON [dbo].[vwEmailTemplates] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Events
-- Item: vwEvents
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Events
-----               SCHEMA:      dbo
-----               BASE TABLE:  Event
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwEvents]
GO

CREATE VIEW [dbo].[vwEvents]
AS
SELECT
    e.*
FROM
    [dbo].[Event] AS e
GO
GRANT SELECT ON [dbo].[vwEvents] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Review Criterias
-- Item: vwReviewCriterias
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Review Criterias
-----               SCHEMA:      dbo
-----               BASE TABLE:  ReviewCriteria
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwReviewCriterias]
GO

CREATE VIEW [dbo].[vwReviewCriterias]
AS
SELECT
    r.*,
    ScoreBoard_ScoreBoardID.[Name] AS [ScoreBoard]
FROM
    [dbo].[ReviewCriteria] AS r
INNER JOIN
    [dbo].[ScoreBoard] AS ScoreBoard_ScoreBoardID
  ON
    [r].[ScoreBoardID] = ScoreBoard_ScoreBoardID.[ID]
GO
GRANT SELECT ON [dbo].[vwReviewCriterias] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Score Boards
-- Item: vwScoreBoards
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Score Boards
-----               SCHEMA:      dbo
-----               BASE TABLE:  ScoreBoard
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwScoreBoards]
GO

CREATE VIEW [dbo].[vwScoreBoards]
AS
SELECT
    s.*
FROM
    [dbo].[ScoreBoard] AS s
GO
GRANT SELECT ON [dbo].[vwScoreBoards] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Sessions
-- Item: vwSessions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Sessions
-----               SCHEMA:      dbo
-----               BASE TABLE:  Session
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwSessions]
GO

CREATE VIEW [dbo].[vwSessions]
AS
SELECT
    s.*,
    Event_EventID.[Name] AS [Event]
FROM
    [dbo].[Session] AS s
INNER JOIN
    [dbo].[Event] AS Event_EventID
  ON
    [s].[EventID] = Event_EventID.[ID]
GO
GRANT SELECT ON [dbo].[vwSessions] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Session Score Boards
-- Item: vwSessionScoreBoards
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Session Score Boards
-----               SCHEMA:      dbo
-----               BASE TABLE:  SessionScoreBoard
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwSessionScoreBoards]
GO

CREATE VIEW [dbo].[vwSessionScoreBoards]
AS
SELECT
    s.*,
    Session_SessionId.[Name] AS [SessionId_Virtual]
FROM
    [dbo].[SessionScoreBoard] AS s
INNER JOIN
    [dbo].[Session] AS Session_SessionId
  ON
    [s].[SessionId] = Session_SessionId.[ID]
GO
GRANT SELECT ON [dbo].[vwSessionScoreBoards] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Personal Details
-- Item: vwUserPersonalDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      User Personal Details
-----               SCHEMA:      dbo
-----               BASE TABLE:  UserPersonalDetails
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [dbo].[vwUserPersonalDetails]
GO

CREATE VIEW [dbo].[vwUserPersonalDetails]
AS
SELECT
    u.*,
    User_UserID.[Name] AS [User]
FROM
    [dbo].[UserPersonalDetails] AS u
INNER JOIN
    [__mj].[User] AS User_UserID
  ON
    [u].[UserID] = User_UserID.[ID]
GO
GRANT SELECT ON [dbo].[vwUserPersonalDetails] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    



GRANT EXECUTE ON [dbo].[spCreateAbstract] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateAbstractLogs] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateAbstractResult] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateAbstractStatus] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateEmailTemplate] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateEvent] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateReviewCriteria] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateScoreBoard] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateSession] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateSessionScoreBoard] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spCreateUserPersonalDetails] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteAbstract] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteAbstractLogs] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteAbstractResult] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteAbstractStatus] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteEmailTemplate] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteEvent] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteReviewCriteria] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteScoreBoard] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteSession] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteSessionScoreBoard] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spDeleteUserPersonalDetails] TO [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateAbstract] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateAbstractLogs] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateAbstractResult] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateAbstractStatus] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateEmailTemplate] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateEvent] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateReviewCriteria] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateScoreBoard] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateSession] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateSessionScoreBoard] TO [cdp_Developer], [cdp_Integration]





GRANT EXECUTE ON [dbo].[spUpdateUserPersonalDetails] TO [cdp_Developer], [cdp_Integration]




-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Logs
-- Item: Permissions for vwAbstractLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwAbstractLogs] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Results
-- Item: Permissions for vwAbstractResults
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwAbstractResults] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstracts
-- Item: Permissions for vwAbstracts
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwAbstracts] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Abstract Status
-- Item: Permissions for vwAbstractStatus
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwAbstractStatus] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Email Templates
-- Item: Permissions for vwEmailTemplates
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwEmailTemplates] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Events
-- Item: Permissions for vwEvents
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwEvents] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Review Criterias
-- Item: Permissions for vwReviewCriterias
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwReviewCriterias] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Score Boards
-- Item: Permissions for vwScoreBoards
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwScoreBoards] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Sessions
-- Item: Permissions for vwSessions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwSessions] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Session Score Boards
-- Item: Permissions for vwSessionScoreBoards
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwSessionScoreBoards] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Personal Details
-- Item: Permissions for vwUserPersonalDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [dbo].[vwUserPersonalDetails] TO [cdp_UI], [cdp_Developer], [cdp_Integration]


